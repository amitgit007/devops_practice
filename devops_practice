  90  firewall-cmd --get-active-zones
   91  firewall-cmd --zone=public --add-port=8180/tcp --permanent
   92  firewall-cmd --get-active-zones
   93  firewall-cmd --reload



Activities done 
1. download Java setup JAva home,add it .bash_profile and in path
2.download jenkins, change the password, set JAVA_HOME and create new job
3.download git and install puligun in jenkins,configure it
4.download maven,set mavenhome and M2=$MAVEN_HOME/bin,maven in bash profile,install plugin maven integration and maven invoker and configure maven tool it
peer issue resolution - yum update -y nss curl libcurl
5.Install tomcat, add users to deploy in tomcat-users.xml, enable port in firewall, add comment out vault section of context.xml to avoid 403
6. install deploy containter plugin and configure the job, add the deployer user credentials on jenkins same user which is there in tomcat for deployment and also specify **/*.war
and deploy war
7.on changing the git repo,build should trigger using scmpoll * * * * *, modify the jenkins job 
clone repo and push the changes
https://github.com/amitgit007/hello-world.git
git config --global user.email "chaudhari3333@gmail.com"
git config --global user.name "amitgit007"

-------------------------------------------------
Docker setup
---------------------------------------------------
run yum install docker on centos
systemctl start docker
----------------------------------------------------
play with docker container
pull tomcat image
docker pull tomcat
run docker container
docker run -it -d -p 8180:8080 --name tomcat-container tomcat:latest
-it -interactive and terminal
-p exposing the port outside docker container to the host
--name of the container
imagename:tag
docker images - to view images
docker ps -a - to see docker processes
docker rm containername - to remove the docker container
docker exec -it containername /bin/bash - login to the container
-----------------------------------------------------------
IMP note: -p forwords port to the VM but if you want to forward it to windows machine/host then goto the network setting -->advanced-->Allow ALL or you can open perticular port
Before that open the port from firewall


-----------------------------------------------------
Integrating Docker with Jenkins
------------------------------------------------------------
setup user dockeradmin on the docker host
useradd dockeradmin
passwd dockeradmin
usermod -aG dockeradmin dockerroot group

On jenkins install plugin publish over ssh 
Goto to system configuration
provide Name: docker-host
server IP: IP address of docker host
user: dockeradmin
click on advanced-->enable passprhase
password: password

Test configuration
-----------------------------------------------------------------------------------------
Copy Artifacts to the docker host

create new job by copying deploy_on_tomcatVM job
-remove poll scm (just avoiding for this scenario)
-under post build - select send files or execute command over ssh
provide source file- deploy_on_tomcatVM workspace/webapp/target folder
remove prefix - will drop webapp/target and only copy webapp.war

save and run the Job
-----------------------------------------------------------------
Lets create docker file- Dockerfile to deploy webapp.war to docker container
vi DockerFile
FROM tomcat:latest -- pull base image
MAINTAINER Amit Chaudhari
COPY ./webapp.war /usr/local/tomcat/webapps

docker build -t project-name/imagename . -- build your image

run container out of it and validate the url

iissue
sudo chmod 666 /var/run/docker.sock -unable to run container due to permission issue
-------------------------------------------------------------------------
Deploying war file on docker container using Jenkins
 in section send build artifact over ssh
under execution command, provides list of commands
cd /home/dockeradmin;docker build -t docker-image .;docker run -d --name docker-containter -p 8180:8080 docker-image

Run the build now and it will run the container

for VM's Ips keep on changing so make sure you goto configure system and update IP in publish over ssh
-----------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

git-->jenkins-->ansible-->docker


















